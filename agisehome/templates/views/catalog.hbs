<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assam GIS Explorer</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/userStyle.css">
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@v9.2.4/ol.css">
    <!-- <script src="/js/script.js"></script> -->
</head>

<body>
    {{> arrownav }}
    <!-- Service Start -->
    <div class="container-xxl py-5">
        <div class="container">
            <div class="text-center mx-auto mb-5 wow" style="max-width: 600px;">
                <h1>Our Geospatial Data Catalog</h1>
            </div>
            <section class="wrapper">
                <div class="container-fostrap">
                    <div class="container-lg">
                        <div class="row">
                            {{#each catalogItems}}
                            <div class="col-xs-12 col-sm-3 mb-4">
                                <div class="card">
                                    <a class="map-card">
                                        <div id="map-{{@index}}" class="map" style="height: 200px; width: 100%;"></div>
                                    </a>
                                    <div class="card-content">
                                        <p class="catalog-card-title">
                                            <a>{{this.title}}</a>
                                        </p>
                                       
                                    </div>
                                    <div class="catalog-card-buttons">
                                        <div class="bg-light rounded h-100 p-1">
                                            <!-- <p class="mb-3 p-4">{{this.file_name}}</p> -->
                                            <div id="btn-txt-catalog" class="small">
                                                
                                               <a class="btn btn-primary text-white py-1 px-0 col-lg-3" href="/catalog/{{this.file_name}}">View</a>

                                                <a class="btn btn-primary text-white py-1 px-0 col-lg-3" href="/catalog/{{this.file_name}}/meta">Meta-Data</a>
                                               
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
    <!-- Service End -->
    {{> homeFooter }}

    <script src="https://cdn.jsdelivr.net/npm/ol@v9.2.4/dist/ol.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            {{#each catalogItems}}
            const map{{@index}} = new ol.Map({
                target: 'map-{{@index}}',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    }),
                    new ol.layer.Tile({
                        source: new ol.source.TileWMS({
                            url: 'http://127.0.0.1:8080/geoserver/wms',
                            params: { 'LAYERS': `{{workspace}}:{{file_name}}`, 'TILED': true },
                            serverType: 'geoserver',
                            transition: 0,
                        })
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([93.5, 26]),
                    zoom: 6
                })
            });
            {{/each}}

            {{#each catalogItems}}
            document.getElementById('request-{{@index}}').addEventListener('click', function () {
                const fileName = '{{this.file_name}}'; // Get the value dynamically
                console.log("hi");
                // Make a POST request to your server
                fetch('/catalog/{{this.file_name}}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Add any other headers you need (e.g., authorization)
                    },
                    body: JSON.stringify({ file_name: fileName }) // Send the value in the request body
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Response data:', data);
                    if (data) {
                        console.log(data.message);
                        Swal.fire({
                            title: data.title,
                            text: data.message,
                            confirmButtonText: "OK",
                            icon: data.icon
                        }).then((result) => {
                            if (result.isConfirmed) {
                                if (data.redirect !== undefined) {
                                    window.location.reload(); // Replace with your desired URL
                                }
                            }
                        });
                    } else {
                        console.error('Unexpected response format:', data);
                        Swal.fire({
                            title: 'Error',
                            text: 'Unexpected response format.',
                            icon: 'error'
                        });
                    }
                })
                .catch(error => {
                    console.error('An error occurred:', error);
                });
            });
            {{/each}}

            const downloadButtons = document.querySelectorAll('.download-button');
            downloadButtons.forEach(button => {
                button.addEventListener('click', async function (event) {
                    event.preventDefault(); // Prevent the default action

                    const fileName = this.getAttribute('data-filename'); // Get filename from data attribute
                    console.log("Clicked download for:", fileName);

                    // Make a fetch request to download the file
                    try {
                        const response = await fetch(`/catalog/download/${fileName}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        });

                        if (response.status === 403) {
                            Swal.fire({
                            title: "Oops?",
                            text: "Forbidden: You do not have access to this file.",
                            confirmButtonText: "OK",
                            icon: "alert"
                        })
                            console.warn('Forbidden: You do not have access to this file.');
                            return;
                        }

                        if (response.status === 404) {
                            Swal.fire({
                            title: "Oops?",
                            text: "File not found.",
                            confirmButtonText: "OK",
                            icon: "alert"
                            })
                            console.warn('File not found.');
                            return;
                        }

                        if (!response.ok) {
                            Swal.fire({
                            title: "Oops?",
                            text: "Failed to download the file.",
                            confirmButtonText: "OK",
                            icon: "alert"
                            })
                            console.error('Failed to download the file.');
                            return;
                        }

                        const blob = await response.blob();
                        const link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob);
                        link.download = `${fileName}.zip`; // Set the desired file name here
                        link.click();

                        // Clean up
                        window.URL.revokeObjectURL(link.href);
                        link.remove();
                    } catch (error) {

                            Swal.fire({
                            title: "Oops?",
                            text: "Failed to download the file.",
                            confirmButtonText: "OK",
                            icon: "error"
                            })
                        console.error('An error occurred while downloading the file:', error);
                    }
                });
            });
        });
    </script>
</body>

</html>
